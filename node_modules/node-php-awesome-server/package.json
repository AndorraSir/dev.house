{
  "_from": "node-php-awesome-server",
  "_id": "node-php-awesome-server@1.3.1",
  "_inBundle": false,
  "_integrity": "sha512-P4sLhpGvxTtggUyy3VPjWL0RBsk163MtiqOkwqWAblCZEI/s+QfUHvDMwKnfUYcRhCkpwafnu62V+2zENWi8xw==",
  "_location": "/node-php-awesome-server",
  "_phantomChildren": {
    "asynckit": "0.4.0",
    "aws4": "1.6.0",
    "caseless": "0.12.0",
    "co": "4.6.0",
    "color-convert": "1.9.1",
    "combined-stream": "1.0.6",
    "escape-string-regexp": "1.0.5",
    "extend": "3.0.1",
    "fast-deep-equal": "1.1.0",
    "fast-json-stable-stringify": "2.0.0",
    "forever-agent": "0.6.1",
    "has-flag": "3.0.0",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-schema-traverse": "0.3.1",
    "json-stringify-safe": "5.0.1",
    "jsprim": "1.4.1",
    "mime-types": "2.1.18",
    "oauth-sign": "0.8.2",
    "safe-buffer": "5.1.1",
    "sshpk": "1.14.1",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.4",
    "tunnel-agent": "0.6.0",
    "uuid": "3.2.1"
  },
  "_requested": {
    "escapedName": "node-php-awesome-server",
    "fetchSpec": "latest",
    "name": "node-php-awesome-server",
    "raw": "node-php-awesome-server",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-php-awesome-server/-/node-php-awesome-server-1.3.1.tgz",
  "_shasum": "9b4531267b29d39321345b07f42137ad3437599b",
  "_spec": "node-php-awesome-server",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/house.ad.test",
  "author": {
    "email": "https://github.com/darklightcode",
    "name": "darklightcode",
    "url": "https://github.com/darklightcode"
  },
  "bundleDependencies": false,
  "dependencies": {
    "chalk": "^2.3.0",
    "cors": "^2.8.4",
    "dateformat": "^3.0.2",
    "express": "^4.16.2",
    "node-port-check": "^1.0.2",
    "php-built-in-web-server-router": "^1.5.1",
    "request": "^2.83.0",
    "ua-parser2": "^0.3.4"
  },
  "deprecated": false,
  "description": "Create a fast php server for your development using node and workers.",
  "devDependencies": {
    "@types/cors": "^2.8.3",
    "@types/express": "^4.0.39",
    "@types/node": "^8.5.1",
    "semver": "^5.4.1",
    "typescript": "^2.6.2"
  },
  "false": {},
  "keywords": [
    "node php server",
    "php",
    "node server",
    "php server",
    "node php awesome server",
    "node",
    "server",
    "awesome",
    "awesome server",
    "php-built-in-web-server-router"
  ],
  "license": "MIT",
  "main": "lib/index",
  "name": "node-php-awesome-server",
  "optionalDependencies": {},
  "readme": "# Node PHP Awesome Server\r\n![Node PHP Awesome Server](https://raw.githubusercontent.com/darklightcode/PHP-Built-in-web-server-Router/master/src/logo.png)\r\n```\r\nnpm install node-php-awesome-server --save-dev\r\n```\r\n# Update\r\n\r\n1.3.1 :\n----------------\n- Added new option ```middlewareAfter```, same as ```middleware```, but registered after the request to php is done.\r\n- Exposed objects ```res.locals.phpBody``` (Buffer) and ```res.locals.phpHeaders``` . Available only in middlewares registered in ```middlewareAfter```.\r\n\n1.3.0 :\r\n----------------\r\n- Fixed an issue where cookies were not kept between master and workers.\r\n\r\n1.2.12 :\r\n----------------\r\n- Fixed an issue where cookies where not kept.\r\n\r\n1.2.9 :\r\n----------------\r\n- Fixed an issue where Apache/Nginx would take over if the worker would target an undefined port.\r\n\r\n1.2.4 :\r\n----------------\r\n- added middleware support\r\n- added php instances to workers ( see phpPerCluster )\r\n- added to `output` the following options : `reqTime` and `port`,\r\n- now you can **cURL** on the same project\r\n- changed strategy for request distribution\r\n- added option `ini_config` so you can load your own php.ini\r\n\r\n\r\n# Use it if you want:\r\n1. A fast local development PHP Server benefiting the advantages from [php-built-in-web-server-router](https://www.npmjs.com/package/php-built-in-web-server-router) \r\n2. Multiple workers for a faster serving time.\r\n3. A colorful output.\r\n\r\n# Options\r\n**Options** | **Default** | **Description**\r\n------- | -------------- | -----------\r\nhost | 0.0.0.0 | Your local IP address\r\nport | 9000 | Your local port\r\nroot    |   ./src/public    |   Path to your folder with index.php\r\nbin |   php |   CLI command to trigger php\r\nini_config |    |   Load a custom php.ini file. Requires an absolute path to the file.<br />**NOTE: ini_set can override values from any config.ini**\r\nini_set |   {}  |   Allows you to set INI directives by adding key:value pairs, including runtime entries (PHP_INI_SYSTEM). 'curl.cainfo' is being added by default if it isn't set\r\nclusterSet  |   auto    |   'Auto' will create a number of workers based on your cpu's(i highly recommend 'auto'), you can specify an integer value if you want but BEWARE of the number of workers that exceeds the number of CPU's\r\nphpPerCluster   | 'based on clusterSet'  |  Number of PHP instances allocated to each cluster. If clusterSet=1 then the minimum default value of phpPerCluster is 2. If clusterSet>1 then the minimum default value of phpPerCluster is 1\r\nsecureOrigin    |   true    | By default - true - will keep HTTP_HOST in your PHP requests even if you're being proxied. Leave it TRUE or start debugging - MAKE YOUR CHOICE\r\ntheme   |   php |   'php', 'angular', 'react', 'codeigniter' - This feature is mostly for esthetics and will change the theme if 'root', 'router' and 'indexFile' are set to default.\r\nrouter  |   **php-built-in-web-server-router** | If you don't specify the 'router', it's taken care of by the default router file. By using the default router you will have an aditional option to change 'index.php' to something else.\r\nindexFile | index.php   | You can point the router to load other 'index' or 'php' file(e.g. index.html , myNewIndex.php, someOtherFile.htm). This option works only if the 'router' option isn't specified.\r\nenv |   {}  | Add key:value pairs that you can use in your PHP later with $_SERVER['KEY']\r\nmiddleware  | (req,res,next)=>{next()}  |   Bind a middleware to the server, you can use a function or an array of functions\r\nmiddlewareAfter  | (req,res,next)=>{next()}  |   It's the same as ```middleware``` but registered after the request is done and will populate ```res.locals``` with ```res.locals.phpBody``` and ```res.locals.phpHeaders```\r\n**output**  | **Object** | **see below values**\r\noutput.startup  |  true | Console info about the starting process\r\noutput.date |   true    |   Request date\r\noutput.ip   |   true    |   Request IP\r\noutput.os   |   false    |   Request Platform\r\noutput.browser   |   false    |   Request Browser\r\noutput.device   |   false    |   Request Device\r\noutput.statusCode   |   true    |   Request http status code\r\noutput.method   |   true    |   Request http method\r\noutput.reqTime   |   false    |   Request duration\r\noutput.port   |   false    |   Show the PHP port that served the request\r\n\r\n# Events\r\n**Event** | **Description**\r\n------- | -----------\r\nconnect |   All workers are up and running\r\nclose   |   Kill all the workers and close the server\r\n\r\n# Middleware:\r\nThe middleware option supports the following formats:\r\n- a function\r\n- an array with [path, function]\r\n- an array with the above formats\r\n\r\n# MiddlewareAfter:\r\nBellow there are two examples that change output, both of them use ```cheerio``` to edit the markup:\r\n\r\nKeep in mind that ```res.locals.phpBody``` is a **Buffer** and in the end it is the output you will see.\r\n\r\nExample 1 - Alter body and end all (any middlewares after this won't get processed):\r\n```\r\nfunction(req,res){\r\n \r\n     /**\r\n      * Get the body\r\n      */\r\n     var body = res.locals.phpBody;\r\n     \r\n     /**\r\n      * Target only content-type text/html\r\n      */\r\n     if (res.locals.phpHeaders.hasOwnProperty('content-type') && res.locals.phpHeaders['content-type'].indexOf('text/html') !== -1) {\r\n    \r\n         var baseUrl = req.protocol + '://' + req.headers['host'] + \"/\";\r\n         \r\n         /**\r\n          * Convert body to string => body.toString() , and pass it to cheerio\r\n          */\r\n         var $ = require('cheerio').load(body.toString());\r\n    \r\n         $(\"body\").append('<div>this tag is from node : '+baseUrl+'</div>')\r\n        \r\n         body = $.html();\r\n    \r\n     }\r\n    \r\n     /**\r\n      * End request\r\n      */\r\n     res.end(body);\r\n\r\n}\r\n```\r\nExample 2 - Alter body and continue:\r\n```\r\nfunction(req,res,next){\r\n \r\n     /**\r\n      * Get the body\r\n      */\r\n     var body = res.locals.phpBody;\r\n     \r\n     /**\r\n      * Target only content-type text/html\r\n      */\r\n     if (res.locals.phpHeaders.hasOwnProperty('content-type') && res.locals.phpHeaders['content-type'].indexOf('text/html') !== -1) {\r\n    \r\n         var baseUrl = req.protocol + '://' + req.headers['host'] + \"/\";\r\n         \r\n         /**\r\n          * Convert body to string => body.toString() , and pass it to cheerio\r\n          */\r\n         var $ = require('cheerio').load(body.toString());\r\n    \r\n         $(\"body\").append('<div>this tag is from node : '+baseUrl+'</div>')\r\n                \r\n         body = $.html();\r\n    \r\n     }\r\n    \r\n     /**\r\n      * Continue with the next middleware\r\n      */\r\n     res.locals.phpBody = body\r\n     \r\n     next();\r\n     \r\n}\r\n```\r\n\r\n\r\n# Use the default Router if you:\r\n- want caching ( see the output bellow for 304 status )\r\n- want to point the router to another 'index.php' file\r\n- don't have any router files\r\n\r\n# Caveats\r\nUsing multiple instances of the same CMS(Wordpress, Drupal, etc. - usually those that use cookies) on the same PORT may show you some 403 (Forbidden) status codes. You can fix this by deleting your cookies.\r\n\r\n### Example\r\n```javascript\r\nconst simpleMiddleware = (req, res, next) => {\r\n\r\n    if (!req.app.hasOwnProperty('output_once')) {\r\n\r\n        req.app['output_once'] = true;\r\n        console.log(\"Simple Middleware - I trigger once before the first request\")\r\n\r\n    }\r\n\r\n    next();\r\n\r\n};\r\n\r\nconst fontsMiddleware = (req, res, next) => {\r\n\r\n    console.log(\"I'll appear only when you're locating the /fonts/ url\");\r\n\r\n    next();\r\n};\r\n\r\nconst nodePhpAwesomeServer = require('node-php-awesome-server');\r\n\r\nconst php = nodePhpAwesomeServer({\r\n\r\n    port: 9012,\r\n    env: {\r\n        'SOMEKEY': 'some value',\r\n        'customObject': JSON.stringify({'test':0,'name':'yes'})\r\n    },\r\n    middleware: [\r\n            /**\r\n             * Just the middleware\r\n             */\r\n            simpleMiddleware,\r\n    \r\n            /**\r\n             * Path and middleware\r\n             */\r\n            [\"/fonts/*\", fontsMiddleware]\r\n        ],\r\n    //ini_config: \"/path/to/your/custom.ini\",\r\n    ini_set: {\r\n        max_execution_time: 280\r\n    },\r\n    output: {\r\n        os: true,\r\n        browser: true,\r\n        device: true,\r\n        reqTime: true\r\n    },\r\n    clustersSet: 'auto',\r\n    phpPerCluster: 2\r\n\r\n});\r\n\r\nphp.on('close', () => {\r\n    console.log('php server closed');\r\n});\r\n\r\nphp.on('connect', () => {\r\n\r\n    console.log('All up and running');\r\n\r\n    //php.close();\r\n\r\n});\r\n\r\n//php.close();\r\n\r\n```\r\n**Run**\r\n```\r\nnode ./YOUR_FILE_WITH_THE_ABOVE_CODE.js\r\n```\r\n\r\n**Output:**\r\n```\r\n> node ./test/example.js\r\n\r\nWorker 3 hired - PID 16096\r\nWorker 1 hired - PID 240\r\nWorker 2 hired - PID 19924\r\nDOCUMENT ROOT: D:/Projects/Home/Workspace/Sites/node-php-awesome-server/public\r\nROUTER: default\r\nLINK: http://localhost:9012\r\nEXTERNAL: http://192.168.0.35:9012\r\nSimple Middleware - I trigger once before the first request\r\n[W2] [Thu Dec 07 2017 18:28:31 2017] 127.0.0.1:57268 [Windows 10] [Firefox] [Other] [200][GET] [58ms]: /\r\n[W2] [Thu Dec 07 2017 18:28:31 2017] 127.0.0.1:57272 [Windows 10] [Firefox] [Other] [304][GET] [38ms]: /polyfills.bundle.js\r\n[W1] [Thu Dec 07 2017 18:28:31 2017] 127.0.0.1:57273 [Windows 10] [Firefox] [Other] [304][GET] [40ms]: /vendor.bundle.js\r\n[W2] [Thu Dec 07 2017 18:28:31 2017] 127.0.0.1:57271 [Windows 10] [Firefox] [Other] [304][GET] [48ms]: /style.css\r\n[W3] [Thu Dec 07 2017 18:28:31 2017] 127.0.0.1:57275 [Windows 10] [Firefox] [Other] [304][GET] [63ms]: /app.bundle.js\r\n[W2] [Thu Dec 07 2017 18:28:31 2017] 127.0.0.1:57283 [Windows 10] [Firefox] [Other] [304][GET] [25ms]: /images/icon.php5.e030bb780de676e424e3a975ea89e83c.png\r\n[W2] [Thu Dec 07 2017 18:29:32 2017] 127.0.0.1:57289 [Windows 10] [Firefox] [Other] [200][GET] [34ms]: /\r\n[W2] [Thu Dec 07 2017 18:29:32 2017] 127.0.0.1:57296 [Windows 10] [Firefox] [Other] [200][GET] [38ms]: /app.bundle.js\r\n[W2] [Thu Dec 07 2017 18:29:32 2017] 127.0.0.1:57294 [Windows 10] [Firefox] [Other] [200][GET] [77ms]: /polyfills.bundle.js\r\n[W2] [Thu Dec 07 2017 18:29:32 2017] 127.0.0.1:57292 [Windows 10] [Firefox] [Other] [200][GET] [174ms]: /style.css\r\nI'll appear only when you're locating the /fonts/ url\r\n[W3] [Thu Dec 07 2017 18:29:32 2017] 127.0.0.1:57304 [Windows 10] [Firefox] [Other] [200][GET] [47ms]: /fonts/Roboto-Light.46e48ce0628835f68a7369d0254e4283.ttf\r\n[W2] [Thu Dec 07 2017 18:29:32 2017] 127.0.0.1:57295 [Windows 10] [Firefox] [Other] [200][GET] [394ms]: /vendor.bundle.js\r\n[W1] [Thu Dec 07 2017 18:29:33 2017] 127.0.0.1:57307 [Windows 10] [Firefox] [Other] [200][GET] [25ms]: /images/icon.php5.e030bb780de676e424e3a975ea89e83c.png\r\n```\r\n**You will see each request starts with [W3][W1]...[Wx]), these are the Workers serving requests**\r\n\r\n**Open the server link on multiple browsers if you wanna see different workers, or you can just spam with some ajax the server link**\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "deploy": "tsc --listEmittedFiles && npm run test && npm run generate:readme minor && git add -A && git commit -a -m \"deploy tsc build\" && npm version minor && git pull --progress -v --no-rebase \"origin\" && git push --tags --progress \"origin\" master:master",
    "deployDev": "tsc --listEmittedFiles && npm run test && npm run generate:readme && git add -A && git commit -a -m \"deploy tsc build\" && npm version patch && git pull --progress -v --no-rebase \"origin\" && git push --tags --progress \"origin\" master:master",
    "generate:readme": "node ./readme/index.js",
    "install-router-package": "npm i -S php-built-in-web-server-router",
    "test": "mocha",
    "test-simple": "node ./tmp/example.js",
    "test-simple-nodemon": "nodemon --watch lib ./tmp/example.js",
    "tsc:watch": "tsc --watch"
  },
  "typescript": {
    "definition": "definitions/index"
  },
  "typings": "definitions/index",
  "version": "1.3.1"
}
